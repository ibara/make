#!/bin/sh
# This configure script written by Brian Callahan <bcallah@openbsd.org>
# and released into the Public Domain.

# Program name
prog="omake"

# What OS are we on?
os=`uname -s`

# Options
for opt
do
  case "$opt" in
    --prefix=*)
      prefix=${opt#*=}
      ;;
    --mandir=*)
      mandir=${opt#*=}
      ;;
    --disable-make|--enable-make)
      if [ "x$opt" = "x--enable-make" ] ; then
	prog="make"
      else
	prog="omake"
      fi
      ;;
    --help|-h)
      echo "Usage: configure [options]"
      echo ""
      echo "Options:"
      printf "  --help or -h            "
      echo "Display this help message"
      printf "  --prefix=PREFIX         "
      echo "Top level install directory is PREFIX [$prefix]"
      printf "  --mandir=MANDIR         "
      echo "Install manual pages to MANDIR [$mandir]"
      printf "  --enable-make           "
      echo "Install executable as make [default=$prog]"
      exit 1
      ;;
    *)
      ;;
  esac
done

# Default prefix
[ x"$prefix" != x ] || prefix=/usr/local
DSP="-D_PATH_DEFSYSPATH=\"\\\"$prefix/share/mk\\\"\""

# Default manual page directory
[ x"$mandir" != x ] || mandir=$prefix/share/man

# Figure out C compiler.
# We can probably assume gcc is available, so it's the failsafe.
printf "checking for C compiler... "
/usr/bin/which cc > /dev/null 2>&1
if [ $? -eq 0 ] ; then
    cc="cc"
else
    /usr/bin/which clang > /dev/null 2>&1
    if [ $? -eq 0 ] ; then
	cc="clang"
    else
	/usr/bin/which gcc > /dev/null 2>&1
	if [ $? -eq 0 ] ; then
	    cc="gcc"
	else
	    echo "not found"
	    echo "Please put cc, clang, or gcc in your $PATH"
	    exit 1
	fi
    fi
fi
echo "$cc"

# What will we call make and where will it live?
printf "determining full path and name for omake... "
echo "$prefix/bin/$prog"

printf "checking for asprintf... "
cat << EOF > /tmp/checkasprintf.c
/* This file generated by omake configure script.  */

#include <stdio.h>

int
main(void)
{
	char *tmp = "y";

	(void) asprintf(NULL, "%s\n", tmp);

	return 0;
}
EOF

$cc -o /tmp/checkasprintf /tmp/checkasprintf.c > /dev/null 2>&1

if [ $? -ne 0 ] ; then
    DNA="-DNEED_ASPRINTF"
    echo "no"
else
    echo "yes"
fi

rm -f /tmp/checkasprintf /tmp/checkasprintf.c checkasprintf.o

printf "checking for fgetln... "
cat << EOF > /tmp/checkfgetln.c
/* This file generated by omake configure script.  */

#include <stdio.h>

int
main(void)
{
	(void) fgetln(NULL, NULL);

	return 0;
}
EOF

$cc -o /tmp/checkfgetln /tmp/checkfgetln.c > /dev/null 2>&1

if [ $? -ne 0 ] ; then
    DNF="-DNEED_FGETLN"
    echo "no"
else
    echo "yes"
fi

rm -f /tmp/checkfgetln /tmp/checkfgetln.c checkfgetln.o

printf "checking for reallocarray... "
cat << EOF > /tmp/checkreallocarray.c
/* This file generated by omake configure script.  */

#include <stdlib.h>

int
main(void)
{
	char *tmp;

	tmp = reallocarray(NULL, 1, 1);

	return 0;
}
EOF

$cc -o /tmp/checkreallocarray /tmp/checkreallocarray.c > /dev/null 2>&1

if [ $? -ne 0 ] ; then
    DNR="-DNEED_REALLOCARRAY"
    echo "no"
else
    echo "yes"
fi

rm -f /tmp/checkreallocarray /tmp/checkreallocarray.c checkreallocarray.o

printf "checking for strlcpy... "
cat << EOF > /tmp/checkstrlcpy.c
/* This file generated by omake configure script.  */

#include <string.h>

int
main(void)
{
	(void) strlcpy(NULL, "yacc", 4);

	return 0;
}
EOF

$cc -o /tmp/checkstrlcpy /tmp/checkstrlcpy.c > /dev/null 2>&1

if [ $? -ne 0 ] ; then
    DNS="-DNEED_STRLCPY"
    echo "no"
else
    echo "yes"
fi

rm -f /tmp/checkstrlcpy /tmp/checkstrlcpy.c checkstrlcpy.o

printf "checking for strtonum... "
cat << EOF > /tmp/checkstrtonum.c
/* This file generated by omake configure script.  */

#include <string.h>

int
main(void)
{
	const char *e;

	(void) strtonum(NULL, 0, 1, e);

	return 0;
}
EOF

$cc -o /tmp/checkstrtonum /tmp/checkstrtonum.c > /dev/null 2>&1

if [ $? -ne 0 ] ; then
    DNSTN="-DNEED_STRTONUM"
    echo "no"
else
    echo "yes"
fi

rm -f /tmp/checkstrtonum /tmp/checkstrtonum.c checkstrtonum.o

printf "checking for __progname... "
cat << EOF > /tmp/checkprogname.c
/* This file generated by omake configure script.  */

#include <stdio.h>

extern char *__progname;

int
main(void)
{
	(void) fprintf(stderr, "%s\n", __progname);

	return 0;
}
EOF

$cc -o /tmp/checkprogname /tmp/checkprogname.c > /dev/null 2>&1

if [ $? -ne 0 ] ; then
    DNP="-DNEED_PROGNAME"
    echo "no"
else
    echo "yes"
fi

rm -f /tmp/checkprogname /tmp/checkprogname.c checkprogname.o

printf "checking for sys_signame... "
cat << EOF > /tmp/checksigname.c
/* This file generated by omake configure script.  */

#include <stdio.h>

extern const char *const sys_signame[];

int
main(void)
{
	(void) fprintf(stderr, "%s\n", sys_signame[0]);

	return 0;
}
EOF

$cc -o /tmp/checksigname /tmp/checksigname.c > /dev/null 2>&1

if [ $? -ne 0 ] ; then
    DNSN="-DNEED_SYS_SIGNAME"
    echo "no"
else
    echo "yes"
fi

rm -f /tmp/checksigname /tmp/checksigname.c checksigname.o

printf "checking for time.h... "
cat << EOF > /tmp/checktime_h.c
/* This file generated by omake configure script.  */

#include <stdio.h>
#include <time.h>

int
main(void)
{
	(void) fprintf(stderr, "time.h found\n");

	return 0;
}
EOF

$cc -o /tmp/checktime_h /tmp/checktime_h.c > /dev/null 2>&1

if [ $? -ne 0 ] ; then
    echo "no"
else
    DHT="-DHAS_TIME_H"
    echo "yes"
fi

rm -f /tmp/checktime_h /tmp/checktime_h.c checktime_h.o

if [ "x$os" = "xOpenBSD" ] ; then
    cflags="-O2 -pipe -std=c99"
elif [ "x$os" = "xFreeBSD" ] ; then
    cflags="-O2 -pipe -std=c99"
elif [ "x$os" = "xNetBSD" ] ; then
    cflags="-O2 -pipe -std=c99"
elif [ "x$os" = "xDragonFly" ] ; then
    cflags="-O2 -pipe -std=c99"
elif [ "x$os" = "xDarwin" ] ; then
    cflags="-O2 -pipe -std=c99"
elif [ "x$os" = "xLinux" ] ; then
    cflags="-O2 -pipe -std=c99 -D_GNU_SOURCE -D_BSD_SOURCE"
elif [ "x$os" = "xSunOS" ] ; then
    if [ "x$cc" = "xgcc" ] ; then
	cflags="-O2 -pipe -std=c99"
    else
	cflags="-xO2"
    fi
elif [ "x$os" = "xAIX" ] ; then
    if [ "x$cc" = "xgcc" ] ; then
	cflags="-O2 -pipe -std=c99"
    else
	cflags="-O3 -qstrict -qro -qroconst"
    fi
else
    os=`uname -s | cut -c 1-6`
    if [ "x$os" = "xCYGWIN" ] ; then
	cflags="-O2 -pipe -std=c99 -D_GNU_SOURCE"
    else
	echo "Unknown operating system, please add the OS to this script"
	echo "and submit a pull request to https://github.com/ibara/make"
	echo "Continuing anyway"
	cflags=""
    fi
fi

cat << EOF > Makefile.tmp
# This Makefile generated by configure.

PREFIX=	$prefix
MANDIR=	$mandir

CC=	$cc
CFLAGS=	$cflags $DSP
CFLAGS+=-I. -DHAS_PATHS_H -DHAS_EXTENDED_GETCWD
CFLAGS+=$DNA $DNF $DNP $DNR $DNS $DNSTN
CFLAGS+=$DNSN $DHT

PROG=	$prog
OBJS=	arch.o buf.o cmd_exec.o compat.o cond.o dir.o direxpand.o dump.o \\
	engine.o enginechoice.o error.o expandchildren.o for.o init.o job.o \\
	lowparse.o main.o make.o memory.o ohash.o parse.o parsevar.o \\
	portable.o str.o stats.o suff.o targ.o targequiv.o timestamp.o var.o \\
	varmodifiers.o varname.o \\
	lstAddNew.o lstAppend.o lstConcat.o lstConcatDestroy.o lstDeQueue.o \\
	lstDestroy.o lstDupl.o lstFindFrom.o lstForEachFrom.o lstInsert.o \\
	lstMember.o lstRemove.o lstReplace.o lstRequeue.o lstSucc.o \\
	arc4random.o arc4random_uniform.o

GENOBJS=generate.o stats.o memory.o ohash.o portable.o

all: generate varhashconsts.h condhashconsts.h nodehashconsts.h \${OBJS}
	\${CC} \${LDFLAGS} -o \${PROG} \${OBJS}

install: all
	install -d \${PREFIX}/bin
	install -d \${MANDIR}/man1
	install -d \${PREFIX}/share/mk
	install -c -s -m 555 \${PROG} \${PREFIX}/bin
	install -c -m 444 make.1 \${MANDIR}/man1/\${PROG}.1
	install -c -m 444 mk/bsd.dep.mk \${PREFIX}/share/mk
	install -c -m 444 mk/bsd.lib.mk \${PREFIX}/share/mk
	install -c -m 444 mk/bsd.man.mk \${PREFIX}/share/mk
	install -c -m 444 mk/bsd.obj.mk \${PREFIX}/share/mk
	install -c -m 444 mk/bsd.own.mk \${PREFIX}/share/mk
	install -c -m 444 mk/bsd.port.arch.mk \${PREFIX}/share/mk
	install -c -m 444 mk/bsd.port.mk \${PREFIX}/share/mk
	install -c -m 444 mk/bsd.port.subdir.mk \${PREFIX}/share/mk
	install -c -m 444 mk/bsd.prog.mk \${PREFIX}/share/mk
	install -c -m 444 mk/bsd.regress.mk \${PREFIX}/share/mk
	install -c -m 444 mk/bsd.subdir.mk \${PREFIX}/share/mk
	install -c -m 444 mk/bsd.sys.mk \${PREFIX}/share/mk
	install -c -m 444 mk/bsd.xconf.mk \${PREFIX}/share/mk
	install -c -m 444 mk/bsd.xorg.mk \${PREFIX}/share/mk
	install -c -m 444 mk/sys.mk \${PREFIX}/share/mk

# may need tweaking if you add variable synonyms or change the hash function
MAGICVARSLOTS=82
MAGICCONDSLOTS=65

varhashconsts.h:
	./generate 1 \${MAGICVARSLOTS} >\$@.tmp && mv \$@.tmp \$@

condhashconsts.h:
	./generate 2 \${MAGICCONDSLOTS} >\$@.tmp && mv \$@.tmp \$@

nodehashconsts.h:
	./generate 3 0 >\$@.tmp && mv \$@.tmp \$@

generate: \${GENOBJS}
	\${CC} \${CFLAGS} \${LDFLAGS} -o \$@ \${GENOBJS}

CKOBJS=	regress.o str.o memory.o buf.o ohash.o portable.o

check: \${CKOBJS}
	\${CC} \${CFLAGS} \${LDFLAGS} -o \$@ \${CKOBJS}

regress: check
	./check

test: regress

clean:
	rm -f \${PROG} \${OBJS} generate varhashconsts.h condhashconsts.h nodehashconsts.h check \${CKOBJS} \${GENOBJS}

distclean: clean
	rm -f Makefile
EOF

mv -f Makefile.tmp Makefile
chmod a-w Makefile
