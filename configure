#!/bin/sh
# This configure script written by Brian Callahan <bcallah@devio.us>
# and released into the Public Domain.

# What OS are we on?
os=`uname -s`

# Figure out C compiler.

printf "checking for C compiler... "
/usr/bin/which clang > /dev/null 2>&1
if [ $? -eq 0 ] ; then
    cc="clang"
else
    # The bounded strings used by ohash are not available in mainstream GCC, but
    # it is in mainstream Clang. The detecting script is a bit unsightly but
    # everything seems to store clang in weird places under bizarre names. We
    # also have to filter out all the extra clang tools that pop up. Try to use
    # the newest version if multiple are found.
    cat /dev/null > /tmp/clanglist
    for f in `echo ${PATH} | sed 's/:/ /g'`
    do
	ls -1 ${f} | grep clang[-_0-9] | grep -v -e '-cpp'			\
	    -e '-apply-replacements'  -e '-change-namespace' -e '-check'	\
	    -e '-cl' -e '-doc' -e '-extdef-mapping' -e '-include-fixer'		\
	    -e '-move' -e '-offload-bundler' -e '-offload-wrapper'  -e '-query' \
	    -e '-refactor' -e '-rename' -e '-reorder-fields' -e '-scan-deps'	\
	    -e '-tidy' >> /tmp/clanglist
    done
    CLANG=$(sort /tmp/clanglist | tail -n1)
    if [ ! -z "${CLANG}" ] ; then
	cc="${CLANG}"
    else
	/usr/bin/which cc > /dev/null 2>&1
	if [ $? -eq 0 ] ; then
	    cc="cc"
	else
	    # We can probably assume gcc is available, so it's the failsafe.
	    /usr/bin/which gcc > /dev/null 2>&1
	    if [ $? -eq 0 ] ; then
		cc="gcc"
	    fi
	fi
    fi
    rm /tmp/clanglist
fi
if [ -z "${cc}" ] ; then
    echo "not found"
    echo "Please put cc, clang, or gcc in your $PATH"
    exit 1
fi

echo "$cc"

printf "checking if compiler supports bounded functions..."
cat << EOF > /tmp/checkbounded.c
/* This file generated by omake configure script.  */
void __attribute__((__bounded__(__buffer__, 1, 2)))
checkbound(char *str, int size)
{

};

int
main()
{
	checkbound("foo", 4);

	return 0;
}
EOF
$cc -o /tmp/checkbounded /tmp/checkbounded.c

if [ $? -eq 0 ] ; then
    DHB="-DHAVE_BOUNDED"
    echo "yes"
else
    echo "no"
fi


# What will we call make and where will it live?
printf "determining full path and name for omake... "
/usr/bin/which /usr/bin/make > /dev/null 2>&1
if [ ! -z "${PREFIX}" ] ; then
    prefix="${PREFIX}"
fi
if [ ! -z "${NAME}" ] ; then
    omake="${NAME}"
fi

if [ $? -ne 0 ] ; then
    if [ -z ${omake} ] ; then
	omake="make"
    fi
    if [ -z "${prefix}" ] ; then
	prefix="/usr"
    fi
else
    /usr/bin/which /usr/local/bin/make > /dev/null 2>&1
    if [ -z ${omake} ] ; then
	if [ $? -ne 0 ] ; then
	    omake="make"
	else
	    omake="omake"
	fi
    fi
    if [ -z "${prefix}" ] ; then
	 prefix="/usr/local"
    fi
    DSP="-D_PATH_DEFSYSPATH=\\"\"$prefix/share/mk\\"\""
fi
echo "$prefix/bin/$omake"

printf "checking for arc4random... "
cat << EOF > /tmp/checkarc4random.c
/* This file generated by omake configure script.  */

#include <stdlib.h>

int
main(void)
{
	(void) arc4random(256);

	return 0;
}
EOF

$cc -o /tmp/checkarc4random /tmp/checkarc4random.c > /dev/null 2>&1

if [ $? -ne 0 ] ; then
    DNA4R="-DNEED_ARC4RANDOM_UNIFORM"
    echo "no"
else
    echo "yes"
fi

rm -f /tmp/checkarc4random /tmp/checkarc4random.c checkarc4random.o

printf "checking for asprintf... "
cat << EOF > /tmp/checkasprintf.c
/* This file generated by omake configure script.  */

#include <stdio.h>

int
main(void)
{
	char *tmp = "y";

	(void) asprintf(NULL, "%s\\n", tmp);

	return 0;
}
EOF

$cc -o /tmp/checkasprintf /tmp/checkasprintf.c > /dev/null 2>&1

if [ $? -ne 0 ] ; then
    DNA="-DNEED_ASPRINTF"
    echo "no"
else
    echo "yes"
fi

rm -f /tmp/checkasprintf /tmp/checkasprintf.c checkasprintf.o

printf "checking for fgetln... "
cat << EOF > /tmp/checkfgetln.c
/* This file generated by omake configure script.  */

#include <stdio.h>

int
main(void)
{
	(void) fgetln(NULL, NULL);

	return 0;
}
EOF

$cc -o /tmp/checkfgetln /tmp/checkfgetln.c > /dev/null 2>&1

if [ $? -ne 0 ] ; then
    DNF="-DNEED_FGETLN"
    echo "no"
else
    echo "yes"
fi

rm -f /tmp/checkfgetln /tmp/checkfgetln.c checkfgetln.o

printf "checking for optreset... "
cat << EOF > /tmp/checkoptreset.c
/* This file generated by omake configure script.  */

#include <unistd.h>

int
main(void)
{
	optreset = 1;

	return optreset ? 0 : 1;
}
EOF

$cc -o /tmp/checkoptreset /tmp/checkoptreset.c > /dev/null 2>&1

if [ $? -ne 0 ] ; then
    DNO="-DNEED_OPTRESET"
    echo "no"
else
    echo "yes"
fi

rm -f /tmp/checkoptreset /tmp/checkoptreset.c checkoptreset.o

printf "checking for pledge... "
cat << EOF > /tmp/checkpledge.c
/* This file generated by omake configure script.  */

#include <unistd.h>

int
main(void)
{
	(void) pledge("stdio", NULL);

	return 0;
}
EOF

$cc -o /tmp/checkpledge /tmp/checkpledge.c > /dev/null 2>&1

if [ $? -ne 0 ] ; then
    DNPL="-DNEED_PLEDGE"
    echo "no"
else
    echo "yes"
fi

rm -f /tmp/checkpledge /tmp/checkpledge.c checkpledge.o

printf "checking for __progname... "
cat << EOF > /tmp/checkprogname.c
/* This file generated by omake configure script.  */

#include <stdio.h>

extern char *__progname;

int
main(void)
{
	(void) fprintf(stderr, "%s\\n", __progname);

	return 0;
}
EOF

$cc -o /tmp/checkprogname /tmp/checkprogname.c > /dev/null 2>&1

if [ $? -ne 0 ] ; then
    DNP="-DNEED_PROGNAME"
    echo "no"
else
    echo "yes"
fi

rm -f /tmp/checkprogname /tmp/checkprogname.c checkprogname.o

printf "checking for reallocarray... "
cat << EOF > /tmp/checkreallocarray.c
/* This file generated by omake configure script.  */

#include <stdlib.h>

int
main(void)
{
	char *tmp;

	tmp = reallocarray(NULL, 1, 1);

	return 0;
}
EOF

$cc -o /tmp/checkreallocarray /tmp/checkreallocarray.c > /dev/null 2>&1

if [ $? -ne 0 ] ; then
    DNR="-DNEED_REALLOCARRAY"
    echo "no"
else
    echo "yes"
fi

rm -f /tmp/checkreallocarray /tmp/checkreallocarray.c checkreallocarray.o

printf "checking for strlcpy... "
cat << EOF > /tmp/checkstrlcpy.c
/* This file generated by omake configure script.  */

#include <string.h>

int
main(void)
{
	(void) strlcpy(NULL, "yacc", 4);

	return 0;
}
EOF

$cc -o /tmp/checkstrlcpy /tmp/checkstrlcpy.c > /dev/null 2>&1

if [ $? -ne 0 ] ; then
    DNS="-DNEED_STRLCPY"
    echo "no"
else
    echo "yes"
fi

rm -f /tmp/checkstrlcpy /tmp/checkstrlcpy.c checkstrlcpy.o

printf "checking for strtonum... "
cat << EOF > /tmp/checkstrtonum.c
/* This file generated by omake configure script.  */

#include <string.h>

int
main(void)
{
	const char *e;

	(void) strtonum(NULL, 0, 1, e);

	return 0;
}
EOF

$cc -o /tmp/checkstrtonum /tmp/checkstrtonum.c > /dev/null 2>&1

if [ $? -ne 0 ] ; then
    DNSTN="-DNEED_STRTONUM"
    echo "no"
else
    echo "yes"
fi

rm -f /tmp/checkstrtonum /tmp/checkstrtonum.c checkstrtonum.o


if [ "x$os" = "xOpenBSD" ] ; then
    cflags="-O2 -pipe -std=c99"
elif [ "x$os" = "xBitrig" ] ; then
    cflags="-O2 -pipe -std=c99"
elif [ "x$os" = "xFreeBSD" ] ; then
    cflags="-O2 -pipe -std=c99"
elif [ "x$os" = "xNetBSD" ] ; then
    cflags="-O2 -pipe -std=c99"
elif [ "x$os" = "xDragonFly" ] ; then
    cflags="-O2 -pipe -std=c99"
elif [ "x$os" = "xDarwin" ] ; then
    cflags="-O2 -pipe -std=c99"
elif [ "x$os" = "xLinux" ] ; then
    cflags="-O2 -pipe -std=c99 -D_GNU_SOURCE -D_DEFAULT_SOURCE"
    cflags=" -Dst_mtimensec=st_mtim.tv_nsec -DNEED_SYS_SIGNAME"
elif [ "x$os" = "xSunOS" ] ; then
    if [ "x$CC" = "xgcc" ] ; then
	cflags="-O2 -pipe -std=c99"
    else
	cflags="-xO2"
    fi
elif [ "x$os" = "xAIX" ] ; then
    if [ "x$CC" = "xgcc" ] ; then
	cflags="-O2 -pipe -std=c99"
    else
	cflags="-O3 -qstrict -qro -qroconst"
    fi
else
    os=`uname -s | cut -c 1-6`
    if [ "x$os" = "xCYGWIN" ] ; then
	cflags="-O2 -pipe -std=c99 -D_GNU_SOURCE -DNEED_SYS_SIGNAME"
    else
	echo "Unknown operating system, please add the OS to this script"
	echo "and submit a pull request to https://github.com/ibara/make"
	exit 1
    fi
fi

cat << EOF > Makefile
# This Makefile generated by configure.

PREFIX=	$prefix

CC=	$cc
CFLAGS=	$cflags $DSP $DNPL $DNO
CFLAGS+=-I. -DHAS_PATHS_H -DHAS_EXTENDED_GETCWD
CFLAGS+=$DHB $DNA $DNF $DNP $DNR $DNS $DNSTN $DNSTMN $DNA4R

PROG=	$omake
OBJS=	arch.o buf.o cmd_exec.o compat.o cond.o dir.o direxpand.o dump.o        \\
	engine.o enginechoice.o error.o expandchildren.o for.o init.o job.o     \\
	lowparse.o main.o make.o memory.o ohash.o parse.o parsevar.o portable.o \\
	str.o stats.o suff.o targ.o targequiv.o timestamp.o var.o varmodifiers.o\\
	varname.o lstAddNew.o lstAppend.o lstConcat.o lstConcatDestroy.o        \\
	lstDeQueue.o lstDestroy.o lstDupl.o lstFindFrom.o lstForEachFrom.o      \\
	lstInsert.o lstMember.o lstRemove.o lstReplace.o lstRequeue.o lstSucc.o

all:	generate varhashconsts.h condhashconsts.h nodehashconsts.h \${OBJS}
	\${CC} \${LDFLAGS} -o \${PROG} \${OBJS}

install: all
	install -d \${PREFIX}/bin
	install -d \${PREFIX}/man/man1
	install -d \${PREFIX}/share/mk
	install -c -s -m 555 \${PROG} \${PREFIX}/bin
	install -c -m 444 make.1 \${PREFIX}/man/man1/\${PROG}.1
	install -c -m 444 mk/bsd.dep.mk \${PREFIX}/share/mk
	install -c -m 444 mk/bsd.lib.mk \${PREFIX}/share/mkb
	install -c -m 444 mk/bsd.man.mk \${PREFIX}/share/mk
	install -c -m 444 mk/bsd.obj.mk \${PREFIX}/share/mk
	install -c -m 444 mk/bsd.own.mk \${PREFIX}/share/mk
	install -c -m 444 mk/bsd.port.arch.mk \${PREFIX}/share/mk
	install -c -m 444 mk/bsd.port.mk \${PREFIX}/share/mk
	install -c -m 444 mk/bsd.port.subdir.mk \${PREFIX}/share/mk
	install -c -m 444 mk/bsd.prog.mk \${PREFIX}/share/mk
	install -c -m 444 mk/bsd.regress.mk \${PREFIX}/share/mk
	install -c -m 444 mk/bsd.subdir.mk \${PREFIX}/share/mk
	install -c -m 444 mk/bsd.sys.mk \${PREFIX}/share/mk
	install -c -m 444 mk/bsd.xconf.mk \${PREFIX}/share/mk
	install -c -m 444 mk/bsd.xorg.mk \${PREFIX}/share/mk
	install -c -m 444 mk/sys.mk \${PREFIX}/share/mk

# may need tweaking if you add variable synonyms or change the hash function
MAGICVARSLOTS=82
MAGICCONDSLOTS=65

varhashconsts.h:
	./generate 1 \${MAGICVARSLOTS} >\$@.tmp && mv \$@.tmp \$@

condhashconsts.h:
	./generate 2 \${MAGICCONDSLOTS} >\$@.tmp && mv \$@.tmp \$@

nodehashconsts.h:
	./generate 3 0 >\$@.tmp && mv \$@.tmp \$@

generate:
	\${CC} \${CFLAGS} \${LDFLAGS} -o \$@ generate.c stats.c memory.c ohash.c   \\
	portable.c

lstAddNew.o:
	\${CC} \${CFLAGS} \${LDFLATS} -c lst.lib/lstAddNew.c -o lstAddNew.o
lstAppend.o:
	\${CC} \${CFLAGS} \${LDFLAGS} -c lst.lib/lstAppend.c -o lstAppend.o
lstConcat.o:
	\${CC} \${CFLAGS} \${LDFLAGS} -c lst.lib/lstConcat.c -o lstConcat.o
lstConcatDestroy.o:
	\${CC} \${CFLAGS} \${LDFLAGS} -c lst.lib/lstConcatDestroy.c -o lstConcatDestroy.o
lstDeQueue.o:
	\${CC} \${CFLAGS} \${LDFLAGS} -c lst.lib/lstDeQueue.c -o lstDeQueue.o
lstDestroy.o:
	\${CC} \${CFLAGS} \${LDFLAGS} -c lst.lib/lstDestroy.c -o lstDestroy.o
lstDupl.o:
	\${CC} \${CFLAGS} \${LDFLAGS} -c lst.lib/lstDupl.c -o lstDupl.o
lstFindFrom.o:
	\${CC} \${CFLAGS} \${LDFLAGS} -c lst.lib/lstFindFrom.c -o lstFindFrom.o
lstForEachFrom.o:
	\${CC} \${CFLAGS} \${LDFLAGS} -c lst.lib/lstForEachFrom.c -o lstForEachFrom.o
lstInsert.o:
	\${CC} \${CFLAGS} \${LDFLAGS} -c lst.lib/lstInsert.c -o lstInsert.o
lstMember.o:
	\${CC} \${CFLAGS} \${LDFLAGS} -c lst.lib/lstMember.c -o lstMember.o
lstRemove.o:
	\${CC} \${CFLAGS} \${LDFLAGS} -c lst.lib/lstRemove.c -o lstRemove.o
lstReplace.o:
	\${CC} \${CFLAGS} \${LDFLAGS} -c lst.lib/lstReplace.c -o lstReplace.o
lstRequeue.o:
	\${CC} \${CFLAGS} \${LDFLAGS} -c lst.lib/lstRequeue.c -o lstRequeue.o
lstSucc.o:
	\${CC} \${CFLAGS} \${LDFLAGS} -c lst.lib/lstSucc.c -o lstSucc.o

CKOBJS=	regress.o str.o memory.o buf.o ohash.o portable.o

check: \${CKOBJS}
	\${CC} \${CFLAGS} \${LDFLAGS} -o \$@ \${CKOBJS}

regress: check
	./check

test: regress

clean:
	rm -f \${PROG} \${OBJS} generate varhashconsts.h condhashconsts.h \\
	    nodehashconsts.h check \${CKOBJS}

distclean: clean
	rm -f Makefile
EOF
